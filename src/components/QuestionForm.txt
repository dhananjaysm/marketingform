import React, { useState,useEffect } from "react";
import { useQuestionStore, Option, Question } from "../context/store";
import { FaCheckCircle, FaChevronLeft } from "react-icons/fa";
import clsx from "clsx";

const QuestionForm: React.FC = () => {
  const {
    questions,
    currentQuestionIndex,
    setCurrentQuestionIndex,
    answers,
    descriptions,
    setAnswer,
    history,
    addToHistory,
    goBack,
    userDetails,
  } = useQuestionStore();
  const currentQuestion = questions[currentQuestionIndex];
  const [inputValue, setInputValue] = useState<string>("");
  const [optionDescription, setOptionDescription] = useState<string>(""); // State for option description
  const [isProvidingDescription, setIsProvidingDescription] =
    useState<boolean>(false);
  const [questionFlow, setQuestionFlow] = useState<number[]>([]);
  if (!currentQuestion) {
    return (
      <div className="py-6">
        <h2 className="mb-4 text-xl font-semibold text-center">
          Questionnaire completed!
        </h2>

        <div>
          <h3 className="mb-2 text-lg font-semibold">User Details:</h3>
          <p>
            Name: {userDetails.name} <br />
            Email: {userDetails.email}
          </p>
        </div>

        <div className="mt-6">
          <h3 className="mb-2 text-lg font-semibold">Selected Answers:</h3>
          <table className="w-full border-collapse">
            <thead>
              <tr className="bg-gray-200">
                <th className="px-4 py-2 text-left">Question</th>
                <th className="px-4 py-2 text-left">Answer</th>
                <th className="px-4 py-2 text-left">Description</th>
              </tr>
            </thead>
            <tbody>
              {Object.keys(answers).map((index: any) => (
                <tr key={index} className="border-t">
                  <td className="px-4 py-2">{questions[index].question}</td>
                  {/* <td className="px-4 py-2">{answers[0][index]}</td> */}
                  <td className="px-4 py-2">
                    {descriptions[index] && (
                      <span className="text-gray-500">
                        {/* {descriptions[index]} */}
                      </span>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    );
  }

  useEffect(() => {
    // Create the initial questionFlow from the indexes of the questions
    const initialFlow = questions.map(question => question.id);
    setQuestionFlow(initialFlow);
  }, []); // Empty dependency array ensures this effect runs once on component mount

  const handleOptionClick = (
    nextQuestionIndex: number,
    optionLabel: string,
    currentQuestion: Question
    // descriptionOptions?: string[]
  ) => {
    
    if (currentQuestion.hasMultipleAnswers) {
      const currentAnswers = answers[currentQuestionIndex] || [];
    
      // Check if the selected option label is already present in answers
      if (currentAnswers.includes(optionLabel)) {
        const updatedAnswers = currentAnswers.filter((answer) => answer !== optionLabel);
        setAnswer(currentQuestionIndex, updatedAnswers);

      } else {

        const updatedAnswers = [...currentAnswers, optionLabel];
        setAnswer(currentQuestionIndex, updatedAnswers);
      }
    } else {
      setAnswer(currentQuestionIndex, [optionLabel]); // Set the single selected answer
    }
   
  
    addToHistory(currentQuestionIndex);
    setCurrentQuestionIndex(nextQuestionIndex);
  
    
  
  };

  const handleInputNextClick = () => {
    // setAnswer(currentQuestionIndex, inputValue);
    addToHistory(currentQuestionIndex);
    setCurrentQuestionIndex(currentQuestion.options[0].nextQuestionIndex); // Assuming next question index
  };

 

  // const isInputQuestion = currentQuestion.options.length === 0; // Check if it's an input question
  return (
    <div className="py-6">
      {currentQuestionIndex > 0 && (
        <div className="flex items-center justify-start">
          <button
            className="flex items-center px-4 py-2 mt-4 font-bold text-blue-500 border rounded hover:bg-blue-100"
            onClick={goBack}
          >
            <FaChevronLeft />
            Back
          </button>
        </div>
      )}
      <h2 className="mb-4 text-xl font-semibold">{currentQuestion.question}</h2>
      {currentQuestion.isInputRequired ? (
        <div className="flex flex-col space-y-2">
          <h2>{currentQuestion.inputHeading}</h2>
          <input
            type="text"
            value={inputValue}
            onChange={(e) => {
              setIsProvidingDescription(false);
              console.log(e.target.value);
              setInputValue(e.target.value);
            }}
            className="w-full p-2 border rounded"
          />
          <button
            className="px-4 py-2 ml-4 font-bold text-white bg-blue-500 rounded hover:bg-blue-700"
            onClick={handleInputNextClick}
            disabled={!inputValue}
          >
            Next
          </button>
        </div>
      ) : (
        <div className="space-y-2">
          {currentQuestion.options.map((option, optionIndex) => (
            <div key={option.label}>
              <button
                className={`w-full flex justify-start items-center px-4 py-2 text-left bg-gray-200 rounded hover:bg-gray-300 ${
                  answers[currentQuestionIndex]?.includes(option.label)
                    ? "bg-blue-500 hover:bg-blue-700 text-black"
                    : ""
                }`}
                onClick={() =>
                  handleOptionClick(
                    option.label,
                    option,
                    optionIndex,
                    currentQuestion
                    // option.descriptionOptions
                  )
                }
              >
                {answers[currentQuestionIndex]?.includes(option.label) && (
                  <FaCheckCircle
                    style={{ color: "green" }}
                    className={clsx("mr-2")}
                  />
                )}
                {option.label}
              </button>
               {/* Render "Next" button for multiple answers scenario */}
          

              {/* {optionToggleStates[optionIndex] && currentQuestion.options &&
                option.isDescriptionRequired &&
                answers[currentQuestionIndex]?.includes(option.label) && (
                  <div>
                    {option.descriptionHeading && (
                      <h2>{option.descriptionHeading}</h2>
                    )}
                    {option.descriptionType === "text" && (
                      <textarea
                        value={optionDescription}
                        onChange={(e) => setOptionDescription(e.target.value)}
                        className="w-full p-2 border rounded"
                        placeholder="Enter description..."
                      />
                    )}
                    {option.descriptionType === "dropdown" && (
                      <select
                        value={optionDescription}
                        onChange={(e) => setOptionDescription(e.target.value)}
                        className="w-full p-2 border rounded"
                      >
                        <option value="">Select an option...</option>
                        {option.descriptionOptions?.map((dropdownOption) => (
                          <option key={dropdownOption} value={dropdownOption}>
                            {dropdownOption}
                          </option>
                        ))}
                      </select>
                    )}
                    {option.descriptionType === "radio" && (
                      <div>
                        {option.descriptionOptions?.map((radioOption) => (
                          <label key={radioOption} className="block">
                            <input
                              type="radio"
                              value={radioOption}
                              checked={optionDescription === radioOption}
                              onChange={(e) =>
                                setOptionDescription(e.target.value)
                              }
                            />
                            {radioOption}
                          </label>
                        ))}
                      </div>
                    )}
                    <button onClick={handleDescriptionSubmit}>Next</button>
                  </div>
                )} */}
            </div>
          ))}
          {currentQuestion.hasMultipleAnswers && (
            <button
              className="px-4 py-2 mt-4 font-bold text-white bg-blue-500 rounded hover:bg-blue-700"
              onClick={handleInputNextClick}
              disabled={!answers[currentQuestionIndex]?.length}
            >
              Next
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default QuestionForm;
